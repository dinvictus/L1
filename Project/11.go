package main

import "fmt"

func Work11() {
	Work11_1()
}

func Work11_1() { // 6828 ns/op		2567 B/op		4 allocs/op
	MapArr := make(map[int]struct{})
	var arr1 []int = []int{546, 234, 688, 1, 42, 0, 0, 1, 1, 1, 5, 1233, 5368, 4234, 1111, 7553345, 5314, 1234, 1242, 43543, 546, 234, 688, 1, 42, 0, 0, 1, 1, 1, 5, 1233, 5368, 4234, 1111, 7553345, 5314, 1234, 1242, 43543, 546, 234, 688, 1, 42, 0, 0, 1, 1, 1, 5, 1233, 5368, 4234, 1111, 7553345, 5314, 1234, 1242, 43543, 546, 234, 688, 1, 42, 0, 0, 1, 1, 1, 5, 1233, 5368, 4234, 1111, 7553345, 5314, 1234, 1242, 43543, 546, 234, 688, 1, 42, 0, 0, 1, 1, 1, 5, 1233, 5368, 4234, 1111, 7553345, 5314, 1234, 1242, 43543, 546, 234, 688, 1, 42, 0, 0, 1, 1, 1, 5, 1233, 5368, 4234, 1111, 7553345, 5314, 1234, 1242, 43543}
	var arr2 []int = []int{321, 8764, 5368, 1242, 7553345, 0, 666, 1, 1, 546, 5, 1233, 688, 4234, 1111, 2222, 999, 1234, 555, 987654321, 321, 8764, 5368, 1242, 7553345, 0, 666, 1, 1, 546, 5, 1233, 688, 4234, 1111, 2222, 999, 1234, 555, 987654321, 321, 8764, 5368, 1242, 7553345, 0, 666, 1, 1, 546, 5, 1233, 688, 4234, 1111, 2222, 999, 1234, 555, 987654321, 321, 8764, 5368, 1242, 7553345, 0, 666, 1, 1, 546, 5, 1233, 688, 4234, 1111, 2222, 999, 1234, 555, 987654321, 321, 8764, 5368, 1242, 7553345, 0, 666, 1, 1, 546, 5, 1233, 688, 4234, 1111, 2222, 999, 1234, 555, 987654321, 321, 8764, 5368, 1242, 7553345, 0, 666, 1, 1, 546, 5, 1233, 688, 4234, 1111, 2222, 999, 1234, 555, 987654321}
	arrRes := make([]int, 0, len(arr1)+len(arr2))
	for _, el := range arr1 { // Добавляем элементы из первого среза в ключи map
		MapArr[el] = struct{}{}
	}

	for _, el := range arr2 { // Проходимся по второму срезу и ищем элемент в качестве ключа в map
		if _, ok := MapArr[el]; ok {
			arrRes = append(arrRes, el) // Если находим, то это пересечение, добавляем в итоговый срез
		}
	}
	fmt.Println(arrRes)
}

func Work11_2() { // 27988 ns/op		12928 B/op		3 allocs/op
	var arr1 []int = []int{546, 234, 688, 1, 42, 0, 0, 1, 1, 1, 5, 1233, 5368, 4234, 1111, 7553345, 5314, 1234, 1242, 43543, 546, 234, 688, 1, 42, 0, 0, 1, 1, 1, 5, 1233, 5368, 4234, 1111, 7553345, 5314, 1234, 1242, 43543, 546, 234, 688, 1, 42, 0, 0, 1, 1, 1, 5, 1233, 5368, 4234, 1111, 7553345, 5314, 1234, 1242, 43543, 546, 234, 688, 1, 42, 0, 0, 1, 1, 1, 5, 1233, 5368, 4234, 1111, 7553345, 5314, 1234, 1242, 43543, 546, 234, 688, 1, 42, 0, 0, 1, 1, 1, 5, 1233, 5368, 4234, 1111, 7553345, 5314, 1234, 1242, 43543, 546, 234, 688, 1, 42, 0, 0, 1, 1, 1, 5, 1233, 5368, 4234, 1111, 7553345, 5314, 1234, 1242, 43543}
	var arr2 []int = []int{321, 8764, 5368, 1242, 7553345, 0, 666, 1, 1, 546, 5, 1233, 688, 4234, 1111, 2222, 999, 1234, 555, 987654321, 321, 8764, 5368, 1242, 7553345, 0, 666, 1, 1, 546, 5, 1233, 688, 4234, 1111, 2222, 999, 1234, 555, 987654321, 321, 8764, 5368, 1242, 7553345, 0, 666, 1, 1, 546, 5, 1233, 688, 4234, 1111, 2222, 999, 1234, 555, 987654321, 321, 8764, 5368, 1242, 7553345, 0, 666, 1, 1, 546, 5, 1233, 688, 4234, 1111, 2222, 999, 1234, 555, 987654321, 321, 8764, 5368, 1242, 7553345, 0, 666, 1, 1, 546, 5, 1233, 688, 4234, 1111, 2222, 999, 1234, 555, 987654321, 321, 8764, 5368, 1242, 7553345, 0, 666, 1, 1, 546, 5, 1233, 688, 4234, 1111, 2222, 999, 1234, 555, 987654321}
	arrRes := make([]int, 0, len(arr1)+len(arr2))
	for _, el := range arr1 { // Проходим по первому срезу
		for _, el2 := range arr2 { // Во вложенном цикле проходим по второму
			if el == el2 { // Если элементы одинаковые, добавляем в итоговый срез
				arrRes = append(arrRes, el)
			}
		}
	}
	fmt.Println(arrRes)
}
