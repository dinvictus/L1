package main

import (
	"fmt"
	"sync"
)

func Work3() {
	var arr [10]int = [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	var sum int = 0
	wg := new(sync.WaitGroup) // WaitGroup для того, чтобы дождаться выполнения всех горутин
	wg.Add(10)                // Значение 10, так как размер массива 10
	mu := new(sync.Mutex)     // Mutex для избежания ошибок при суммировании в переменную
	for _, el := range arr {
		go func(el int) { // Запуск анонимной горутины на каждой итерации цикла
			mu.Lock() // Остальные горутины ждут, пока не произведутся действия с sum
			sum += el * el
			mu.Unlock() // Действия с sum выполнены, другие горутины продолжают работу
			wg.Done()   // Уменьшение значения WaitGroup на 1, конец работы текущей горутины
		}(el)
	}
	wg.Wait()                   // Ожидание завершения всех горутин
	fmt.Println("Сумма: ", sum) // Вывод суммы
}
